  version: "3.8"
  services:
    mongodb:
      image: mongo
      container_name: mongodb
      ports:
        - 27017:27017
      volumes:
        - data:/data/db
      environment:
        - MONGO_INITDB_ROOT_USERNAME=rootuser
        - MONGO_INITDB_ROOT_PASSWORD=password
        - MONGO_INITDB_DATABASE=buy01
      networks:
        - backend

    mongo-express:
      image: mongo-express
      container_name: mongo-express
      ports:
        - 8081:8081
      environment:
        - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
        - ME_CONFIG_MONGODB_ADMINPASSWORD=password
        - ME_CONFIG_MONGODB_SERVER=mongodb
      networks:
        - backend

    kafka:
      image: apache/kafka:latest
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
        # Configure listeners for both docker and host communication
        KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
        KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

        # Settings required for KRaft mode
        KAFKA_NODE_ID: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

        # Listener to use for broker-to-broker communication
        KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
        # Required for a single node cluster
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      networks:
        - backend

    registery:
      build:
        context: ./api/registery/
        dockerfile: Dockerfile
      container_name: registery
      ports:
        - 8761:8761
      environment:
        SPRING_APPLICATION_NAME: registery
        SERVER_PORT: 8761
        EUREKA_INSTANCE_HOSTNAME: registery
        EUREKA_CLIENT_FETCH_REGISTRY: "false"
        EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      networks:
        - backend

    front-end:
      build:
        context: ./front-end
      restart: always
      container_name: front-end
      ports:
        - "4200:4200"
      profiles: ["test", "run"]
      command:
          - sh
          - -c
          - |
            if [ "$COMPOSE_PROFILES" = "test" ]; then
              ng test
            else
              ng serve --host=0.0.0.0
            fi

    gateway:
      build:
        context: ./api/gateways/
        dockerfile: Dockerfile
      container_name: gateways
      ports:
        - 8082:8082
      environment:
        SPRING_APPLICATION_NAME: gateways
        SPRING_PROFILES_ACTIVE: docker
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery:8761/eureka/
        SERVER_SSL_KEY_STORE: classpath:keystore.p12
        SERVER_SSL_KEY_STORE_PASSWORD: password
        SERVER_SSL_KEY_STORE_TYPE: PKCS12
        SERVER_SSL_KEY_ALIAS: gateway
      networks:
        - backend
      depends_on:
        - registery
      profiles: [ "test", "run" ]
      command:
        - sh
        - -c
        - |
          if [ "$COMPOSE_PROFILES" = "test" ]; then
            mvn test
          else
            mvn spring-boot:run
          fi

    users:
      build:
        context: ./api/users/
        dockerfile: Dockerfile
      container_name: users-services
      ports:
        - 8083:8083
      environment:
        SPRING_APPLICATION_NAME: users
        SPRING_PROFILES_ACTIVE: docker  # Activate docker profile
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery:8761/eureka/
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
        SPRING_DATA_MONGODB_USERNAME: rootuser
        SPRING_DATA_MONGODB_PASSWORD: password
        SPRING_DATA_MONGODB_DATABASE: buy01
        SPRING_DATA_MONGODB_PORT: 27017
        SPRING_DATA_MONGODB_HOST: mongodb
      depends_on:
        - mongodb
        - kafka
        - registery
        - gateway
      networks:
        - backend
      profiles: [ "test", "run" ]
      command:
        - sh
        - -c
        - |
          if [ "$COMPOSE_PROFILES" = "test" ]; then
            mvn test
          else
            mvn spring-boot:run
          fi

    products:
      build:
        context: ./api/products/
        dockerfile: Dockerfile
      container_name: products-services
      ports:
        - 8084:8084
      environment:
        SPRING_APPLICATION_NAME: products
        SPRING_PROFILES_ACTIVE: docker  # Activate docker profile
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery:8761/eureka/
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
        SPRING_DATA_MONGODB_USERNAME: rootuser
        SPRING_DATA_MONGODB_PASSWORD: password
        SPRING_DATA_MONGODB_DATABASE: buy01
        SPRING_DATA_MONGODB_PORT: 27017
        SPRING_DATA_MONGODB_HOST: mongodb
      depends_on:
        - mongodb
        - kafka
        - registery
        - gateway
      networks:
        - backend
      profiles: [ "test", "run" ]
      command:
        - sh
        - -c
        - |
          if [ "$COMPOSE_PROFILES" = "test" ]; then
            mvn test
          else
            mvn spring-boot:run
          fi
  

    media:
      build:
        context: ./api/media/
        dockerfile: Dockerfile
      container_name: media-services
      ports:
        - 8085:8085
      environment:
        SPRING_APPLICATION_NAME: media
        SPRING_PROFILES_ACTIVE: docker  # Activate docker profile
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registery:8761/eureka/
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
        SPRING_DATA_MONGODB_USERNAME: rootuser
        SPRING_DATA_MONGODB_PASSWORD: password
        SPRING_DATA_MONGODB_DATABASE: buy01
        SPRING_DATA_MONGODB_PORT: 27017
        SPRING_DATA_MONGODB_HOST: mongodb
      depends_on:
        - mongodb
        - kafka
        - registery
        - gateway
      networks:
        - backend
      profiles: [ "test", "run" ]
      command:
        - sh
        - -c
        - |
          if [ "$COMPOSE_PROFILES" = "test" ]; then
            mvn test
          else
            mvn spring-boot:run
          fi
  

  volumes:
    data: {}
  networks:
    backend:
      driver: bridge