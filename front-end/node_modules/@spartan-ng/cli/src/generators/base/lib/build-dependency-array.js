"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDependencyArray = buildDependencyArray;
exports.buildDevDependencyArray = buildDevDependencyArray;
const versions_1 = require("../versions");
const BRAIN_DEPENDENCY_MAP = {
    accordion: versions_1.SPARTAN_ACCORDION_BRAIN_VERSION,
    alertdialog: versions_1.SPARTAN_ALERT_DIALOG_BRAIN_VERSION,
    avatar: versions_1.SPARTAN_AVATAR_BRAIN_VERSION,
    command: versions_1.SPARTAN_COMMAND_BRAIN_VERSION,
    dialog: versions_1.SPARTAN_DIALOG_BRAIN_VERSION,
    hovercard: versions_1.SPARTAN_HOVERCARD_BRAIN_VERSION,
    label: versions_1.SPARTAN_LABEL_BRAIN_VERSION,
    menu: versions_1.SPARTAN_MENU_BRAIN_VERSION,
    popover: versions_1.SPARTAN_POPOVER_BRAIN_VERSION,
    progress: versions_1.SPARTAN_PROGRESS_BRAIN_VERSION,
    radiogroup: versions_1.SPARTAN_RADIO_GROUP_BRAIN_VERSION,
    select: versions_1.SPARTAN_SELECT_BRAIN_VERSION,
    separator: versions_1.SPARTAN_SEPARATOR_BRAIN_VERSION,
    sheet: versions_1.SPARTAN_SHEET_BRAIN_VERSION,
    switch: versions_1.SPARTAN_SWITCH_VERSION,
    tabs: versions_1.SPARTAN_TABS_VERSION,
    table: versions_1.SPARTAN_TABLE_VERSION,
    toggle: versions_1.SPARTAN_TOGGLE_VERSION,
    formfield: versions_1.SPARTAN_FORMFIELD_VERSION,
};
// TODO: can we combine this with primitive-deps.ts
const DEPENDENT_ON_DIALOG = ['alertdialog', 'sheet', 'popover'];
const DEPENDENT_ON_FORMS = ['input', 'select'];
function buildDependencyArray(options, angularVersion, existingCdkVersion) {
    let dependencies = {
        '@spartan-ng/ui-core': versions_1.SPARTAN_CORE_VERSION,
        '@angular/cdk': existingCdkVersion ?? angularVersion,
    };
    if (options.peerDependencies) {
        dependencies = { ...dependencies, ...options.peerDependencies };
    }
    const brainDependencyVersion = BRAIN_DEPENDENCY_MAP[options.primitiveName];
    if (brainDependencyVersion) {
        dependencies = { ...dependencies, [`@spartan-ng/ui-${options.primitiveName}-brain`]: brainDependencyVersion };
    }
    if (brainDependencyVersion && DEPENDENT_ON_DIALOG.includes(options.primitiveName)) {
        dependencies = { ...dependencies, '@spartan-ng/brain/dialog': brainDependencyVersion };
    }
    if (brainDependencyVersion && DEPENDENT_ON_FORMS.includes(options.primitiveName)) {
        dependencies = { ...dependencies, '@spartan-ng/brain/forms': brainDependencyVersion };
    }
    if (options.primitiveName === 'icon') {
        dependencies = { ...dependencies, '@ng-icons/core': versions_1.NG_ICONS_VERSION };
    }
    return dependencies;
}
function buildDevDependencyArray() {
    return {
        'tailwind-merge': versions_1.TAILWIND_MERGE_VERSION,
        tailwindcss: versions_1.TAILWINDCSS_VERSION,
        'tailwindcss-animate': versions_1.TAILWIND_ANIMATE_VERSION,
    };
}
//# sourceMappingURL=build-dependency-array.js.map